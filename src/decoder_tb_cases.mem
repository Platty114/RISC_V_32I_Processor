//test cases for control unit
//format is as follows
//instruction | alu_signals | expected
//expected is in the format
// {pc_src, pc_target_src, result_src, mem_write, mem_width, alu_control, alu_src, imm_control, reg_write}
//      instructions            | alu |     expected
//LOAD TYPE
//lw
11111111110001001010001100000011_0_0_0_0_x_01_0_010_0000_1_00_1
//STORE TYPE
//sw
00000000011001001010010000100011_0_0_0_0_x_xx_1_010_0000_1_01_0
//R TYPE
//add
00000000010100100000001110110011_0_0_0_0_x_00_0_xxx_0000_0_xx_1
//sub
01000000001000111000001110110011_0_0_0_0_x_00_0_xxx_0001_0_xx_1
//xor
00000000011000101100001000110011_0_0_0_0_x_00_0_xxx_0010_0_xx_1
//or
00000000011000101110001000110011_0_0_0_0_x_00_0_xxx_0011_0_xx_1
//and
00000000011000101111001000110011_0_0_0_0_x_00_0_xxx_0100_0_xx_1
//sll
00000000011000101001001000110011_0_0_0_0_x_00_0_xxx_0101_0_xx_1
//srl
00000000011000101101001000110011_0_0_0_0_x_00_0_xxx_0110_0_xx_1
//sra
01000000011000101101001000110011_0_0_0_0_x_00_0_xxx_0111_0_xx_1
//slt
00000000011000101010001000110011_0_0_0_0_x_00_0_xxx_1000_0_xx_1
//sltu
00000000011000101011001000110011_0_0_0_0_x_00_0_xxx_1001_0_xx_1
//I TYPE ALU
//addi
00000000010100000000000100010011_0_0_0_0_x_00_0_xxx_0000_1_00_1
//xori
00000000011000101100001000010011_0_0_0_0_x_00_0_xxx_0010_1_00_1
//ori
00000000011000101110001000010011_0_0_0_0_x_00_0_xxx_0011_1_00_1
//andi
00000000011000101111001000010011_0_0_0_0_x_00_0_xxx_0100_1_00_1
//slli
00000000011000101001001000010011_0_0_0_0_x_00_0_xxx_0101_1_00_1
//srli
00000000011000101101001000010011_0_0_0_0_x_00_0_xxx_0110_1_00_1
//srai
01000000011000101101001000010011_0_0_0_0_x_00_0_xxx_0111_1_00_1
//slti
00000000011000101010001000010011_0_0_0_0_x_00_0_xxx_1000_1_00_1
//sltiu
00000000011000101011001000010011_0_0_0_0_x_00_0_xxx_1001_1_00_1
//B TYPE
//BEQ
//equal (should branch)
11111110010000100000101011100011_1_0_0_1_0_xx_0_xxx_0001_0_10_0
//not equal (shouldn't branch)
11111110010000100000101011100011_0_0_0_0_0_xx_0_xxx_0001_0_10_0
//BNE
//not equal(should branch)
11111110010000100001101011100011_0_0_0_1_0_xx_0_xxx_0001_0_10_0
//equal (shouln't branch)
11111110010000100001101011100011_1_0_0_0_0_xx_0_xxx_0001_0_10_0
//BLT
//less than(should branch)
11111110010000100100101011100011_0_1_0_1_0_xx_0_xxx_0001_0_10_0
//Greater eq(shouldn't branch)
11111110010000100100101011100011_0_0_0_0_0_xx_0_xxx_0001_0_10_0
//BGE
//less than(shouldn't branch)
11111110010000100101101011100011_0_1_0_0_0_xx_0_xxx_0001_0_10_0
//Greater eq(should branch)
11111110010000100101101011100011_0_0_0_1_0_xx_0_xxx_0001_0_10_0
//BLTU
//less than(should branch)
11111110010000100110101011100011_0_0_1_1_0_xx_0_xxx_0001_0_10_0
//Greater eq(shouldn't branch)
11111110010000100110101011100011_0_0_0_0_0_xx_0_xxx_0001_0_10_0
//BGEU
//less than(shouldn't branch)
11111110010000100111101011100011_0_0_1_0_0_xx_0_xxx_0001_0_10_0
//Greater eq(should branch)
11111110010000100111101011100011_0_0_0_1_0_xx_0_xxx_0001_0_10_0
//J TYPE
//jal
00000000100000000000000111101111_0_0_0_1_0_10_0_xxx_xxxx_x_11_1
//jalr
00000000100000011000000101100111_0_0_0_1_1_10_0_xxx_xxxx_x_00_1
